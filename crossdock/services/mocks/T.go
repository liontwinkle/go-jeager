// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	"github.com/stretchr/testify/mock"
	"github.com/crossdock/crossdock-go"
)

// T is an autogenerated mock type for the T type
type T struct {
	mock.Mock
}

// Behavior provides a mock function with given fields:
func (_m *T) Behavior() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Param provides a mock function with given fields: key
func (_m *T) Param(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Tag provides a mock function with given fields: key, value
func (_m *T) Tag(key string, value string) {
	_m.Called(key, value)
}

// Errorf provides a mock function with given fields: format, args
func (_m *T) Errorf(format string, args ...interface{}) {
	_m.Called(format, args)
}

// Skipf provides a mock function with given fields: format, args
func (_m *T) Skipf(format string, args ...interface{}) {
	_m.Called(format, args)
}

// Successf provides a mock function with given fields: format, args
func (_m *T) Successf(format string, args ...interface{}) {
	_m.Called(format, args)
}

// Fatalf provides a mock function with given fields: format, args
func (_m *T) Fatalf(format string, args ...interface{}) {
	_m.Called(format, args)
}

// FailNow provides a mock function with given fields:
func (_m *T) FailNow() {
	_m.Called()
}

// Put provides a mock function with given fields: status, output
func (_m *T) Put(status crossdock.Status, output string) {
	_m.Called(status, output)
}
