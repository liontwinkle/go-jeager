// Code generated by mockery v1.0.0

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
package mocks

import context "context"
import elastic "github.com/olivere/elastic"
import es "github.com/uber/jaeger/pkg/es"
import mock "github.com/stretchr/testify/mock"

// SearchService is an autogenerated mock type for the SearchService type
type SearchService struct {
	mock.Mock
}

// Aggregation provides a mock function with given fields: name, aggregation
func (_m *SearchService) Aggregation(name string, aggregation elastic.Aggregation) es.SearchService {
	ret := _m.Called(name, aggregation)

	var r0 es.SearchService
	if rf, ok := ret.Get(0).(func(string, elastic.Aggregation) es.SearchService); ok {
		r0 = rf(name, aggregation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.SearchService)
		}
	}

	return r0
}

// Do provides a mock function with given fields: ctx
func (_m *SearchService) Do(ctx context.Context) (*elastic.SearchResult, error) {
	ret := _m.Called(ctx)

	var r0 *elastic.SearchResult
	if rf, ok := ret.Get(0).(func(context.Context) *elastic.SearchResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: query
func (_m *SearchService) Query(query elastic.Query) es.SearchService {
	ret := _m.Called(query)

	var r0 es.SearchService
	if rf, ok := ret.Get(0).(func(elastic.Query) es.SearchService); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.SearchService)
		}
	}

	return r0
}

// Size provides a mock function with given fields: size
func (_m *SearchService) Size(size int) es.SearchService {
	ret := _m.Called(size)

	var r0 es.SearchService
	if rf, ok := ret.Get(0).(func(int) es.SearchService); ok {
		r0 = rf(size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.SearchService)
		}
	}

	return r0
}

// Type provides a mock function with given fields: typ
func (_m *SearchService) Type(typ string) es.SearchService {
	ret := _m.Called(typ)

	var r0 es.SearchService
	if rf, ok := ret.Get(0).(func(string) es.SearchService); ok {
		r0 = rf(typ)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.SearchService)
		}
	}

	return r0
}
