// Code generated by go-bindata.
// sources:
// plugin/storage/es/mappings/.nocover
// plugin/storage/es/mappings/jaeger-service.json
// plugin/storage/es/mappings/jaeger-span.json
// DO NOT EDIT!

package mappings

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Nocover = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x2e\x49\x2c\xc9\xcc\x56\x28\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xc8\x2f\x2e\x29\x56\x48\x2c\x2d\xc9\xd7\x4d\x4f\xcd\x4b\x2d\x4a\x2c\x49\x4d\x51\x48\xcb\xcc\x49\x2d\xd6\xe3\x02\x04\x00\x00\xff\xff\x32\x20\xa2\xb5\x2b\x00\x00\x00")

func NocoverBytes() ([]byte, error) {
	return bindataRead(
		_Nocover,
		".nocover",
	)
}

func Nocover() (*asset, error) {
	bytes, err := NocoverBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".nocover", size: 43, mode: os.FileMode(420), modTime: time.Unix(1549614327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jaegerServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xd6\x88\xd3\x6a\x6b\x21\xa4\x72\xf0\xad\x40\x11\x48\x50\xd0\x56\x9c\x10\x1a\xcd\xc6\xb3\x59\x83\xed\x18\xdb\x29\xac\xaa\x7c\x77\xe4\xe2\x92\xa4\x5b\xed\x89\x43\x73\xc8\x9f\xf1\x7b\xf3\xfc\x73\xec\xdb\x46\x08\xc8\xec\x82\xa5\xcc\xa0\x04\xac\xbe\x13\x77\x1c\xcf\x12\xc7\x1b\xd3\xf2\xd9\x0a\xd6\x45\x92\x38\x67\xe3\xbb\x04\xaa\x38\x84\x00\xe3\x35\xff\x96\x7e\x70\x5b\x8e\xd8\xef\x30\xed\x29\xea\x04\x4a\x3c\xbb\x45\xbc\xfa\xf2\xf1\xd5\xe5\x06\x3f\xbd\xc5\xeb\x77\x17\x9b\x37\xd7\x88\xe3\xfa\x71\x5b\xe4\x60\x4d\x4b\xc7\xc6\xcd\xe5\xe7\x0f\xef\x5f\x5f\x1c\x59\x1d\x85\x60\x7c\x27\x3d\xa7\xcc\x1a\x77\x86\xad\x4e\xd2\x1a\x67\x32\xa8\xf3\xe7\x0b\x6d\xe4\x9f\x03\xa7\x9c\x64\x4b\xed\x9e\x25\x7b\xda\x5a\x06\x95\xe3\xc0\x47\x3d\x39\x4a\x7d\xf0\xe4\x4c\x0b\x6a\x47\x36\x71\x23\xc4\x5d\x32\xd4\xc4\x09\x1d\x35\xef\x68\xb0\x19\xef\x2b\xa5\x46\xd6\x4e\x9f\x42\xc0\xdf\x30\x3d\x35\x2b\x57\x45\x11\x02\x6a\x16\xde\x2f\x7d\x02\xf5\xf5\x9f\x79\x6a\x53\x56\x3e\x90\xc7\x4c\x5d\x42\x47\x61\x1e\x71\x37\x5a\x27\xf7\xb0\x5e\x7e\xea\x21\x30\x28\xf8\xc1\x87\x5f\x7d\xd4\xb0\x7e\x38\x6e\x3a\xdf\x47\x46\xda\xf6\x37\x0c\xea\xc5\xf9\xcb\x85\x60\x5c\xea\x21\x50\xde\xa3\xa3\xdc\xee\x41\x41\xa6\x4e\xae\x60\x26\x18\x9b\x47\x7c\x0b\x8a\x10\xfb\x96\x53\x7a\x62\x20\x75\x56\xf2\x14\x50\x7d\xfb\xd6\xcc\xba\x41\x3d\x1d\xb3\x0d\x10\x62\x1f\x38\x66\xc3\x69\xb1\x0d\xaa\xf0\x8a\x1c\x2f\xd1\x4e\x61\x9d\x40\x9a\xe1\x40\x09\xa4\x6c\x7a\xff\xff\xba\x37\xf3\x67\xb9\x8f\xcd\xd8\xfc\x09\x00\x00\xff\xff\xa9\xdd\x8c\xcc\x24\x04\x00\x00")

func jaegerServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_jaegerServiceJson,
		"jaeger-service.json",
	)
}

func jaegerServiceJson() (*asset, error) {
	bytes, err := jaegerServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jaeger-service.json", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1549614327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jaegerSpanJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x41\x6b\xdb\x4c\x10\xbd\xeb\x57\x2c\xc3\x77\x0a\x89\xf8\x28\xa4\x07\xdd\xd2\x26\xa5\x81\x26\x2d\x49\x7a\x2a\x65\x19\x4b\x23\x79\x93\xd5\x6a\xbb\x3b\x4e\x6b\x82\xff\x7b\x91\x65\xd7\x96\xb5\x92\x13\xb0\x4a\x0b\xcd\x21\xb6\x76\xf7\xcd\x9b\xb7\x33\xf3\xac\xa7\x48\x08\x60\x2a\xad\x46\x26\x48\x04\x1c\xdd\x23\x15\xe4\x4e\xbc\x45\x73\x72\x04\xc7\xf5\xbe\x27\x66\x65\x0a\x0f\x49\x7d\x5c\x08\x50\x26\xa3\x1f\xb1\x99\x95\x13\x72\xb2\xca\xa5\x9f\xa2\xcb\x3c\x24\xe2\xbf\x27\x29\xaf\x3f\x5f\xbd\xb9\xb8\x91\x1f\xdf\xc9\xdb\xf7\x67\x37\xe7\xb7\x52\x2e\x8e\xc3\x30\x47\x56\xab\x14\xbb\xc0\x9b\x8b\x4f\x1f\x2e\xdf\x9e\x75\xa0\x25\x5a\xab\x4c\x11\x1b\xf2\x4c\x99\xcc\x15\xe9\xcc\xc7\x5a\x95\x8a\x21\x39\xfd\xbf\x75\xd6\xd1\xb7\x19\x79\xf6\x71\x8a\xe9\x94\x62\x32\x38\xd1\x04\x09\xbb\x19\x75\x62\x92\x8b\xb3\xb9\xc1\x52\xa5\x90\xe4\xa8\x3d\x45\x42\x2c\x99\x61\xc5\xb8\x91\x2e\x33\xca\x71\xa6\x59\xae\x57\xea\x35\xd4\x7a\xf3\x28\x04\x34\x64\xd9\x26\x58\xfd\xb7\x92\x22\x04\xac\xb8\xe4\xfa\xde\x3d\x24\x5f\x7e\x81\x37\x61\xea\x9b\xb7\x68\x24\x63\xe1\x65\x89\x76\x9b\x62\xb9\xbb\x4a\x6e\x77\xbd\xae\xe8\xdc\x12\x24\xf0\x40\xf3\xef\x95\xcb\xe0\x78\x77\x5f\x15\xa6\x72\x24\x71\x52\x3d\x12\x24\xaf\x4e\x5f\xb7\x0e\x2c\xda\xe7\xc1\x22\x4f\x65\x89\x9c\x4e\x21\x01\xc6\x22\x3e\x82\xad\x03\x8b\x28\x80\x6b\xa9\xb0\xae\x4a\xc9\xfb\x3f\x4c\xc8\x2a\xab\x78\x48\xd0\xea\xdb\xd7\x68\x2b\xda\xb2\x28\x5b\xd5\xb7\xae\xb2\xe4\x58\x91\x6f\xf5\x00\x3b\x4c\xe9\xf2\xbc\xad\x69\x48\xcf\x80\x96\x2d\x1d\x60\xd1\x91\xe1\x5b\x8b\x66\x84\xe0\x7e\x9c\xb0\xf5\x05\x21\xab\xca\x5c\x63\x49\x87\x4f\x9a\xd1\xf1\x9d\xea\x8b\xac\x2b\x53\xc0\x30\xf0\x4a\x69\xad\x7c\x18\x9e\xd5\xc6\xd8\xca\x2a\xaf\x5c\x89\x0c\x09\x90\xad\xd2\xa9\x2c\x1b\x70\x90\x21\x9b\x35\xba\x5f\x9a\x59\xae\xb1\xe8\xc9\x47\x19\xae\x0d\x3a\x8c\xd3\x55\x07\x16\x6e\xcf\x26\xa2\x2a\xc9\x33\x96\x9d\x81\xec\x4b\x51\x04\x66\xaa\x31\xe1\xfe\x08\x8d\x57\x77\x27\xb7\x6d\xb8\x9d\xed\xfe\xb4\x97\xdb\x0f\x34\x0f\xad\xef\x77\x0c\xb1\xdf\x35\x02\x2a\x97\xa8\x47\xd4\x33\xfa\xed\xac\x8c\xc5\xdd\x32\xf8\x98\xbc\xd1\xd0\xf3\x62\x9f\xd9\xaf\xad\xf4\xf9\x9d\xe7\xc9\x3d\xaa\x94\xba\x76\xf0\x1c\x51\x2f\x34\x7d\xc6\x81\x1f\x96\x6a\x72\x4f\x29\x0f\x77\x38\x77\x66\x51\xfc\xeb\xef\x83\xb1\xfe\x0d\xfd\xed\x28\x27\x47\x26\xdd\x2d\xd6\x40\x0f\x0c\xd4\x7f\x68\x30\x1c\xe5\xe1\xdb\x38\xf4\x50\x84\xde\x4e\x46\xe0\x09\xbd\x50\x1c\x82\x66\x6f\xc9\x3a\x53\xdf\x37\xf1\x3b\xa0\xd1\x2b\x1c\x9c\xec\x03\xdf\x7a\xcf\x24\x1f\xde\x58\xc7\xe9\xd5\xc1\x77\xf1\xe6\xb3\xfe\xbf\x88\x16\xd1\xcf\x00\x00\x00\xff\xff\x8e\x66\x65\xcd\xc0\x0e\x00\x00")

func jaegerSpanJsonBytes() ([]byte, error) {
	return bindataRead(
		_jaegerSpanJson,
		"jaeger-span.json",
	)
}

func jaegerSpanJson() (*asset, error) {
	bytes, err := jaegerSpanJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jaeger-span.json", size: 3776, mode: os.FileMode(420), modTime: time.Unix(1549614327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".nocover": Nocover,
	"jaeger-service.json": jaegerServiceJson,
	"jaeger-span.json": jaegerSpanJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".nocover": &bintree{Nocover, map[string]*bintree{}},
	"jaeger-service.json": &bintree{jaegerServiceJson, map[string]*bintree{}},
	"jaeger-span.json": &bintree{jaegerSpanJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
